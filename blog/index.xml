<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blogs on tnoda78.github.io </title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>http://tnoda78.github.io/blog/</link>
        <language>ja-jp</language>
        <author>Tomoya Noda</author>
        <copyright>Copyright (C) 2015 Tomoya Noda</copyright>
        <updated>Thu, 28 Apr 2016 19:30:45 &#43;0900</updated>
        
        <item>
            <title>Webpack</title>
            <link>http://tnoda78.github.io/blog/webpack/</link>
            <pubDate>Thu, 28 Apr 2016 19:30:45 &#43;0900</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/webpack/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://webpack.github.io/&#34;&gt;Webpack&lt;/a&gt;を触ってみた。JavaScriptのビルドツール。&lt;/p&gt;

&lt;p&gt;良い。とても良い。loaderがとても良い。&lt;/p&gt;

&lt;p&gt;Railsのassetsまわりもこれでやれればいいんじゃないかなと思った。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Ansibleいいないいな</title>
            <link>http://tnoda78.github.io/blog/ansible-good-good/</link>
            <pubDate>Thu, 14 May 2015 21:27:36 &#43;0900</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/ansible-good-good/</guid>
            <description>

&lt;h2 id=&#34;はじめに:0b1e640617f749f1a30a9b7f2d176167&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;新しいプロジェクトの開発環境を作る時にAnsibleを使った。このプロジェクトはモバイルアプリの開発。サーバーはmBassを使う。したがってAnsibleをサーバーのプロビジョニングに使った訳ではなく、ローカル開発の環境作りに使った。&lt;/p&gt;

&lt;h2 id=&#34;開発環境構築は手順書配布ではなく-playbook配布で:0b1e640617f749f1a30a9b7f2d176167&#34;&gt;開発環境構築は手順書配布ではなく、Playbook配布で&lt;/h2&gt;

&lt;p&gt;開発環境構築手順書といえば、テキストで実行コマンドをつらつらと書いていくもの。Excelでインストール手順を画面キャプチャを取りながら…なんてものもある。手順書を書くのはなかなかつらい。「あーでもない、こーでもない」と試行錯誤して環境作って、手順書作って、その手順書に誤りがないかまた環境作ってみたりする必要があったりして。&lt;/p&gt;

&lt;p&gt;最初から構築をAnsibleのPlaybook作成から始めれば「あーでもない、こーでもない」がプログラムのデバッグ、トライ＆エラーと同じになる。プログラムに慣れている人ならそれほど苦行にならない。各メンバーに配布するのはPlaybookになるので、手順書いらない。Playbookに誤りがないかの確認はansible-playbookコマンドを実行するだけ。自動。&lt;/p&gt;

&lt;h2 id=&#34;小さく作れるansible:0b1e640617f749f1a30a9b7f2d176167&#34;&gt;小さく作れるAnsible&lt;/h2&gt;

&lt;p&gt;AnsibleはYAMLファイル１つから始められるのもとても良い。&lt;a href=&#34;https://docs.ansible.com/playbooks_best_practices.html&#34;&gt;こちら&lt;/a&gt;を見ると、サーバー構成に使うならChefのようなディレクトリ構成にすることが良いらしい。&lt;/p&gt;

&lt;p&gt;例えばWebアプリの開発なら、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ローカル開発環境のPlaybookをYAMLファイル1つで作る。&lt;/li&gt;
&lt;li&gt;Production用サーバーの構成は上のYAMLファイルをもとに（分割などして）膨らましていく。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の流れでいけそう。（やったことないけど）&lt;/p&gt;

&lt;p&gt;AnsibleとChefの関係は、RubyのWebアプリフレームワークでいうところのSinatraとRailsの関係に似ていると思った。Sinatraもファイル1つで始められるけど、規模が大きくなったりMVCやテストを意識すると、結局&lt;code&gt;rails new&lt;/code&gt;した時のディレクトリ構成に近づいていくみたいな。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:0b1e640617f749f1a30a9b7f2d176167&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;規模の大きなシステムになると、色々例外ケースなどが生じて「Rubyのコード書けるChef」が重宝されるという情報も聞きますが、サーバー構成もAnsibleでいいんじゃないかと思いました。言い切れるほど試してないはいませんが。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>DBを使わないWebアプリはHerokuに上げればいいという話</title>
            <link>http://tnoda78.github.io/blog/heroku-prototype/</link>
            <pubDate>Thu, 19 Mar 2015 00:10:29 &#43;0900</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/heroku-prototype/</guid>
            <description>

&lt;h2 id=&#34;はじめに:c4d78843085b2b98d7a85485515dd00d&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;DBを使わないWebアプリのアイデアを思いついたらHeroku（無料枠）を使えばいいじゃないのという話。&lt;/p&gt;

&lt;h2 id=&#34;プロトタイプ実装やライブラリ検証:c4d78843085b2b98d7a85485515dd00d&#34;&gt;プロトタイプ実装やライブラリ検証&lt;/h2&gt;

&lt;p&gt;Railsで履歴の差分表示をGitHubのソースコードのDiffのような表示が簡単にできないものかと調べていたら、Diffyというgemがあることが分かった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/samg/diffy&#34;&gt;https://github.com/samg/diffy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;どこまで便利に使えるのかを調べるために試しに実装してみてその結果を他の人に共有する必要がある場合、ローカル環境で3000番であげてそのURLを共有したり社内のどこかのサーバーにあげればいいのだが、ライブラリの検証段階なのでPublicに漏らしてはいけない情報がある訳でもなく、Herokuにデプロイしてしまうのがいいなと思ってあげてみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://diffy-sample.herokuapp.com&#34;&gt;https://diffy-sample.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2つの入力フォームを入力してそのdiffを表示するだけの簡単なもの。DBとかもいらない。&lt;/p&gt;

&lt;h2 id=&#34;herokuとherokuの無料枠:c4d78843085b2b98d7a85485515dd00d&#34;&gt;HerokuとHerokuの無料枠&lt;/h2&gt;

&lt;p&gt;Herokuの無料枠(1Dyno)で充分で動く。データを保持する必要もないのでAdd-onも要らない。Herokuはサインアップにはクレジットカード番号は求められない。有料枠を選択した場合や一定の使用料を超えると有料になるAdd-on（Heroku Postgresなど）を指定した場合になって初めてカード番号の登録を求められる。誤って課金されてしまう心配もない。&lt;/p&gt;

&lt;p&gt;現在はGitHubのPublicリポジトリと連携をすれば、GitHubのリポジトリにpushすればHerokuへのデプロイが始まるようにできる。&lt;code&gt;git push heroku master&lt;/code&gt; ってやらなくてよくなっている。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:c4d78843085b2b98d7a85485515dd00d&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;公開できるソースコードやアプリはなるべく公開した方が良いと考えています、良し悪しにかかわらず。世界のどこか、または5年後10年後の未来に誰かの役に立ったりするかもしれませんからね。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>技術情報収集のフローの話</title>
            <link>http://tnoda78.github.io/blog/tech-info-flow/</link>
            <pubDate>Mon, 16 Mar 2015 19:18:31 &#43;0900</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/tech-info-flow/</guid>
            <description>

&lt;h2 id=&#34;はじめに:a2f65a8c910e24db67889b1af19eb505&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;技術情報収集をどうしているかという話。Feedly、はてブ、Pocket、IFTTTをうまく使うと良いよという話。&lt;/p&gt;

&lt;h2 id=&#34;方法:a2f65a8c910e24db67889b1af19eb505&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;以下のサービスをうまく使う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://feedly.com/&#34; target=&#34;_blank&#34; &gt;Feedly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://b.hatena.ne.jp/&#34; target=&#34;_blank&#34;&gt;はてブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getpocket.com/&#34; target=&#34;_blank&#34;&gt;Pocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ifttt.com/&#34; target=&#34;_blank&#34;&gt;IFTTT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feedly、はてブ、PocketをIFTTTでうまいこと連携させれば、Pocketに情報が溜まっていく。&lt;/p&gt;

&lt;p&gt;IFTTTに設定している設定内容は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feedlyで&amp;rdquo;Saved For Later&amp;rdquo;されたら、はてブにブックマークする&lt;/li&gt;
&lt;li&gt;はてブにブックマークされたら、Pocketに登録する&lt;/li&gt;
&lt;li&gt;PocketでStarをつけたら、Twitterにつぶやく&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;feedlyで-saved-for-later-されたら-はてブにブックマークする:a2f65a8c910e24db67889b1af19eb505&#34;&gt;Feedlyで&amp;rdquo;Saved For Later&amp;rdquo;されたら、はてブにブックマークする&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If new article saved for later, then send an email from &amp;hellip;&amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Feedlyに登録するのはエンジニアのブログとTech系サイトの記事。ブログは仕事をしていて調べ物した時にググってヒットしたものが主なもの。技術系ではないものも含まれているけれど少数。&lt;/p&gt;

&lt;p&gt;Feedlyでは読まない。タイトルを眺めるだけ。その中で読みたいものにSaved For Laterをする。現状、Saved For Laterをするのは「30記事に1つ」程度。&lt;/p&gt;

&lt;p&gt;はてブはサインアップすると、メールアドレスを貰えてそこにメールをする（件名:タイトル、本文:URL）と、ブックマークしてくれる機能がある。IFTTTは海外のサービスなので日本のサービスは連携できないが、Gmailアカウントからメールを送信できる。それを利用する。&lt;/p&gt;

&lt;h3 id=&#34;はてブにブックマークされたら-pocketに登録する:a2f65a8c910e24db67889b1af19eb505&#34;&gt;はてブにブックマークされたら、Pocketに登録する。&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If new feed item from &lt;a href=&#34;http://b.hatena.ne.jp/tnoda78/rss&#34;&gt;http://b.hatena.ne.jp/tnoda78/rss&lt;/a&gt;, then save later for tnoda78&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上の方法でFeedlyで気になった記事ははてブされる。はてブされたものはPocketに登録される。それなら、Feedly → Pocketで良いのでは？となるが、はてブのホットエントリ（テクノロジ）を眺めてブックマークしたものをPocketに登録したいのでこの流れにしている。&lt;/p&gt;

&lt;p&gt;その他、ブラウザで見つけた記事を「後で読む」したい場合は、Pocketに直接登録せずにはてブに追加する。TwitterやTumblrでシェアされたリンクもはてブに追加する。&lt;/p&gt;

&lt;h3 id=&#34;pocketでstarをつけたら-twitterにつぶやく:a2f65a8c910e24db67889b1af19eb505&#34;&gt;PocketでStarをつけたら、Twitterにつぶやく&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If new favorite item by tnoda78, then post a tweet to @tnoda78&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pocketまでの流れで完結するのだけれど、すばらしいブログや記事はシェアをしたい。PocketでStarを付けるとつぶやく。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:a2f65a8c910e24db67889b1af19eb505&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;「この業界で最近何が起きているのか？」は労力をかけずに把握できるようになった。&lt;/p&gt;

&lt;p&gt;しばらくIFTTTはチェックしていなかったけれど、やれること増えていますね。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>ブログを移行してみた</title>
            <link>http://tnoda78.github.io/blog/hugo-blog/</link>
            <pubDate>Tue, 03 Mar 2015 00:00:00 UTC</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/hugo-blog/</guid>
            <description>

&lt;h2 id=&#34;はじめに:06e3276c8a44b9163745f4e814816f07&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;ブログ（というか文章）を書く習慣はつけた方が良いと考えブログを書くことにしました。&lt;/p&gt;

&lt;h2 id=&#34;hugo:06e3276c8a44b9163745f4e814816f07&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;はGo言語製の静的サイトジェネレーターです。Rubyで言うところのJykell, Middlemanです。使い方も似ています。移行も簡単なようです。しかも早い。&lt;/p&gt;

&lt;p&gt;htmlページの生成も早いのですが、なによりもインストールが早いのが印象的です。Ruby製のツールはRubyをインストールする必要がありますからね。Go言語はコマンドラインツールの作成に本当最適ですね。
GitHub社のhubコマンドやHerokuのツールも既にGo言語で書きなおされているとのこと。&lt;/p&gt;

&lt;h2 id=&#34;githubページに移行-werckerで自動デプロイ:06e3276c8a44b9163745f4e814816f07&#34;&gt;GitHubページに移行。Werckerで自動デプロイ&lt;/h2&gt;

&lt;p&gt;ブログはGitHubページに移行しました。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Sinatra、Unicorn、Rmagickを使って、GIF画像作成Webアプリを作る</title>
            <link>http://tnoda78.github.io/blog/sinatra-unicorn-rmagick/</link>
            <pubDate>Tue, 18 Feb 2014 00:00:00 UTC</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/sinatra-unicorn-rmagick/</guid>
            <description>

&lt;h2 id=&#34;はじめに:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;以前にRailsアプリで画像をダウンロードできるアプリを仕事で作ったことがありまして、それを応用してGIF画像を作成するアプリを過去に作っていました。
デプロイするサーバーとかを持っていないので、社内のサーバーに上げて公開していたたんなる内輪ウケのジョークアプリだったのですが、Herokuにはデフォルトで&lt;a href=&#34;http://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt;が入っていることを知りまして、Herokuにデプロイしてみました。&lt;/p&gt;

&lt;h2 id=&#34;作ったアプリについて:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;作ったアプリについて&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tnoda78.github.io/hozumicart3&#34;&gt;Hozumi Cart3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tnoda78/hozumicart3&#34;&gt;ソース on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現バージョンはスマホでも見られます！（レスポンシブデザインに挑戦）&lt;/p&gt;

&lt;h2 id=&#34;作成工程:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;作成工程&lt;/h2&gt;

&lt;p&gt;作成工程は以下の流れです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;土台となるGIF画像を作成する&lt;/li&gt;
&lt;li&gt;GIF画像に指定した文字を埋め込む&lt;/li&gt;
&lt;li&gt;指定したカートの色を変える&lt;/li&gt;
&lt;li&gt;WEBアプリ化する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;土台となるgif画像を作成する:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;土台となるGIF画像を作成する&lt;/h3&gt;

&lt;p&gt;まず文字が表示されていないカートGIF画像をツールを使って作りました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/224715403/images/cart.gif&#34; alt=&#34;cart&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;こちらは、&lt;a href=&#34;http://giam.softonic.jp/&#34;&gt;Giam&lt;/a&gt;というソフトを使いました。&lt;/p&gt;

&lt;p&gt;上にあるGIF画像は10コマの画像で構成されています。&lt;/p&gt;

&lt;p&gt;例）その中の2枚の画像&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/224715403/images/cart_pic01.bmp&#34; alt=&#34;cart1&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/224715403/images/cart_pic02.bmp&#34; alt=&#34;cart2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;この10枚の画像はキャプチャソフトとExcelを使って作りました。。カートはExcelのオブジェクトで横にずらしながら、コマ撮りアニメーションのようにキャプチャしていきます。
キャプチャしていった10枚の画像をGiamで編集し、一つのGIF画像を作成していきました。&lt;/p&gt;

&lt;h3 id=&#34;gif画像に指定した文字を埋め込む:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;GIF画像に指定した文字を埋め込む&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt;は、画像編集ソフトです。コマンドラインにて画像編集（大きさ変えたり、画像の品質を変えたり）する事が可能です。
PhotoShopやGimpで出来ることをCUIでできるイメージです。こちらのソフトはコマンドラインだけでなく、&lt;a href=&#34;http://www.imagemagick.org/script/api.php&#34;&gt;APIも用意&lt;/a&gt;されていまして、
&lt;a href=&#34;http://rmagick.rubyforge.org/&#34;&gt;Rmagick&lt;/a&gt;というRuby製のライブラリを使うとこのAPIをRubyにて使うことができます。今回はRmagickを使いました。&lt;/p&gt;

&lt;p&gt;以下のようなメソッドを使用して、上に書いた各10枚の画像を参照できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gif = Magick::ImageList.new &amp;quot;images/cart.gif&amp;quot; # &amp;lt;-- imagesディレクトリのcart.gifにアクセス
gif.each_with_index do |f, i|  # &amp;lt;-- f が画像オブジェクト、iはindex
   # ...
   # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画像オブジェクトに文字を埋め込むには、annotateメソッドを使います。&lt;/p&gt;

&lt;p&gt;（ソース記述例）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# imgは画像オブジェクト。x, y は画像の座標（ピクセル）です。
Magick::Draw.new.annotate(img, 0, 0, x, y, letter) do 
# フォントファイルのパス、配置、大きさ等を指定
self.font = font_file_path               
self.align = Magick::CenterAlign
self.stroke = &amp;quot;transparent&amp;quot;
self.pointsize = 52
self.text_antialias = true
self.kerning = 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;指定したカートの色を変える:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;指定したカートの色を変える&lt;/h3&gt;

&lt;p&gt;ImageMagickは、指定したピクセルの色を変えられます。Rmagickでは、Imageクラスのpixel_colorメソッドを使います。&lt;/p&gt;

&lt;p&gt;（ソース記述例）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# カートの高さ(Y座標 118～134）あたりのピクセルの色が緑色（土台GIFのカートの色）の座標を指定された色に変えている
for y in 118...134
  for x in 0...img.columns
    src = img.pixel_color(x, y)
    r = src.red
    g = src.green
    b = src.blue
    if r == 37522 &amp;amp;&amp;amp; g == 53456 &amp;amp;&amp;amp; b == 20560
    img.pixel_color(x, y, &amp;quot;#&amp;quot; + color)
  end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;webアプリ化する:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;WEBアプリ化する&lt;/h3&gt;

&lt;p&gt;Sinatraを使っています。（Sinatraは情報が多いので省略します。私自身それほど詳しい訳ではないので。。）
ルートにアクセスするとページHTMLを返し、&lt;code&gt;/cart&lt;/code&gt;にアクセスするとGIF画像を返しています。&lt;a href=&#34;https://github.com/tnoda78/hozumicart3/blob/master/main.rb&#34;&gt;ソース - main.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画像の編集は時間がかかるので、&lt;code&gt;/cart&lt;/code&gt;のレスポンスはやや遅いです。&lt;/p&gt;

&lt;h2 id=&#34;heroke-とgithub-pagesにデプロイしました:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;Heroke とGithub Pagesにデプロイしました&lt;/h2&gt;

&lt;p&gt;上に書いたRmagick、SinatraのソースはHerokuを使って公開しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hozumicart3.herokuapp.com/&#34;&gt;http://hozumicart3.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sinatra、Unicornを使ったHerokuへのデプロイは以下のサイトを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.classmethod.jp/server-side/ruby-on-rails/sinatra-postgresql-unicorn-on-heroku/&#34;&gt;Sinatra + PostgreSQL + Unicorn な Web サーバーを Heroku に構築する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github Pagesも作りたかったので、viewファイルと同じようなものをhtmlで作りました。（HerokuにUPしているviewファイルはローカル端末でも動くようにしているため、若干記述は異なります）&lt;/p&gt;

&lt;p&gt;Github Project用のGithub Pagesは、&lt;code&gt;gh-pages&lt;/code&gt;というブランチを作成してhtml等をpushすれば構築できます。以下のサイトを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tokkono.cute.coocan.jp/blog/slow/index.php/programming/github-pages-almost-perfect-guide/&#34;&gt;GitHub Pagesホスティングサービス（ほぼ）完全活用ガイド&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ボタンを押したり、色指定プルダウンが変わったタイミングで、imgタグのsrc属性を変えて画像を取得しています。
画像がロードされるまでにちょっと時間がかかるので、Now LoadingGif画像に切り替えたりしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tnoda78.github.io/hozumicart3/images/cart_wait1.gif&#34; alt=&#34;Now Loading...&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;さいごに:5d72898f4d30e0953c0a2c9f55487a45&#34;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;Ruby自体に触れるようになったのも、ここ1、2年（おかしな記述も多いかと）なのですがRubygemsやBundler等の一連のエコシステムが心地よくて、「早めに完成品が見られる感」が半端ないですね。
表示されたGif画像は保存もできるので、どうぞお持ち帰りください。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Go言語のお勉強　コマンドラインツールを作成する</title>
            <link>http://tnoda78.github.io/blog/go-command-line-tool/</link>
            <pubDate>Wed, 12 Feb 2014 00:00:00 UTC</pubDate>
            <author>Tomoya Noda</author>
            <guid>http://tnoda78.github.io/blog/go-command-line-tool/</guid>
            <description>

&lt;h2 id=&#34;はじめに:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;最近よく&lt;a href=&#34;http://golang.jp/&#34;&gt;Go言語&lt;/a&gt;の評判を耳にするようになりました。ちょっと勉強してみようと思いまして、コマンドラインツールを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tnoda78.github.io/hozumi-command/&#34;&gt;Hozumi Command&lt;/a&gt;
&lt;a href=&#34;https://github.com/tnoda78/hozumi-command&#34;&gt;(ソース)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;リズミカルに「ほずみ」と出力するだけの、なんの役にもたたないツールです。（「ほずみ」以外にも色々出力できます。）
Go言語はクロスコンパイル環境の構築が容易で、様々な環境で動くバイナリファイルが簡単に作成できます。以下のようなスクリプトを作成すれば、一気に５環境のバイナリファイルを作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GOOS=linux GOARCH=386 go build -o tools/linux/i386/hozumi hozumi.go
GOOS=linux GOARCH=amd64 go build -o tools/linux/amd64/hozumi hozumi.go
GOOS=windows GOARCH=386 go build -o tools/windows/i386/hozumi.exe hozumi.go
GOOS=windows GOARCH=amd64 go build -o tools/windows/amd64/hozumi.exe hozumi.go
GOOS=darwin GOARCH=amd64 go build -o tools/darwin/hozumi hozumi.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go言語はサイトの情報が充実していますね。日本語の翻訳も進んでいて素晴らしいです。基本的にサイトを見れば、ひととおり習得できそうです。基本的な構文はサイトを見れば充分かと。&lt;/p&gt;

&lt;h2 id=&#34;学んだこと:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;学んだこと&lt;/h2&gt;

&lt;p&gt;作成したツールは以下を使っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flagパッケージ&lt;/li&gt;
&lt;li&gt;timeパッケージ&lt;/li&gt;
&lt;li&gt;構造体&lt;/li&gt;
&lt;li&gt;メソッド&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flagパッケージ:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;flagパッケージ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.jp/pkg/flag&#34;&gt;http://golang.jp/pkg/flag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;コマンドラインツールなのでオプション指定を可能にしたいのですが、標準パッケージが存在します。&lt;/p&gt;

&lt;p&gt;flag.BoolVar(&amp;amp;help, &amp;ldquo;h&amp;rdquo;, false, &amp;ldquo;display help&amp;rdquo;)
flag.BoolVar(&amp;amp;help, &amp;ldquo;help&amp;rdquo;, false, &amp;ldquo;display help&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;上のように記述すれば、変数helpには-h(or &amp;ndash;help)が指定されていれば、&amp;rdquo;true&amp;rdquo;、指定されていなければ&amp;rdquo;false&amp;rdquo;が入ります。
また&lt;code&gt;flag.Usage&lt;/code&gt;に関数を代入すれば、誤ったオプションを指定した場合に代入した関数を実行することができます。ヘルプ表示をすることも容易にできます。&amp;rdquo;First-Class Functions（第１級関数）&amp;rdquo;ってやつですね。&lt;/p&gt;

&lt;h3 id=&#34;timeパッケージ:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;timeパッケージ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.jp/pkg/time&#34;&gt;http://golang.jp/pkg/time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;リズミカルな出力のために、sleepをさせたいです。Sleep関数はtimeパッケージにあります。&lt;/p&gt;

&lt;h3 id=&#34;構造体:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;構造体&lt;/h3&gt;

&lt;p&gt;Go言語にはクラスの概念は無いようです。C言語のような構造体が定義できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type HozumiWriter struct {
    contents                 []string
    intervalDisplayRow       time.Duration
    intervalDisplayOneLetter time.Duration
    intervalDisplayCool      time.Duration
    cool                     bool
    dashboard                []string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;メソッド:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;メソッド&lt;/h3&gt;

&lt;p&gt;構造体に振る舞いは定義できます。writeメソッドから、displayContentsメソッドなどを呼んでいます。-cオプションが付いている場合は、&lt;code&gt;&amp;quot;Coooooooooooooooooooooool&amp;quot;&lt;/code&gt;と叫びます。（2014/02/13現在）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (writer *HozumiWriter) write() {
    for {
        writer.displayContents()
        if writer.cool {
            writer.displayCool()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;さいごに:48baa64d6bc05431962e7e8fea63e16f&#34;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;「LL言語ほど柔軟な記述はできませんが、C言語よりはカジュアルに使えそう」というのが私のGo言語に対する印象です。&lt;/p&gt;

&lt;p&gt;実は１点このツールで実装したいけれどできていないものがありまして、&lt;code&gt;-p --parallel&lt;/code&gt;オプションです。Go言語をさわる前によく耳にしていたのが&lt;a href=&#34;http://golang.jp/effective_go#goroutines&#34;&gt;ゴルーチン&lt;/a&gt;です。並列処理の扱いが得意であると。&lt;/p&gt;

&lt;p&gt;並列的にパラメータで指定した文字列を出力させたり、&amp;rdquo;Cooooooooooooooooooooooooooooooooool&amp;rdquo;と叫ばせるのが当面の目標です。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
